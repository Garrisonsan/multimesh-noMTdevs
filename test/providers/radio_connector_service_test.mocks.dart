// Mocks generated by Mockito 5.4.4 from annotations
// in meshx/test/providers/radio_connector_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:meshx/models/mesh_radio.dart' as _i7;
import 'package:meshx/models/radio_connector_state.dart' as _i4;
import 'package:meshx/providers/tcp/tcp_radio_connector.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TcpRadioConnector].
///
/// See the documentation for Mockito's code generation for more information.
class MockTcpRadioConnector extends _i1.Mock implements _i3.TcpRadioConnector {
  MockTcpRadioConnector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotifierProviderRef<_i4.RadioConnectorState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i4.RadioConnectorState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i4.RadioConnectorState>);

  @override
  _i4.RadioConnectorState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.dummyValue<_i4.RadioConnectorState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.RadioConnectorState);

  @override
  set state(_i4.RadioConnectorState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RadioConnectorState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i5.dummyValue<_i4.RadioConnectorState>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i4.RadioConnectorState);

  @override
  _i6.Future<void> connect(_i7.TcpMeshRadio? radio) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [radio],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> disconnect({String? errorMsg}) => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#errorMsg: errorMsg},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool updateShouldNotify(
    _i4.RadioConnectorState? previous,
    _i4.RadioConnectorState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
