// Mocks generated by Mockito 5.4.4 from annotations
// in meshx/test/providers/ble/ble_radio_connector_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i2;
import 'package:meshx/models/ble_characteristics.dart' as _i3;
import 'package:meshx/providers/ble/ble_characteristics_finder.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:platform/src/interface/local_platform.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceIdentifier_0 extends _i1.SmartFake
    implements _i2.DeviceIdentifier {
  _FakeDeviceIdentifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBleCharacteristics_2 extends _i1.SmartFake
    implements _i3.BleCharacteristics {
  _FakeBleCharacteristics_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothCharacteristic_3 extends _i1.SmartFake
    implements _i2.BluetoothCharacteristic {
  _FakeBluetoothCharacteristic_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i2.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  List<_i2.BluetoothService> get servicesList => (super.noSuchMethod(
        Invocation.getter(#servicesList),
        returnValue: <_i2.BluetoothService>[],
      ) as List<_i2.BluetoothService>);

  @override
  bool get isAutoConnectEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoConnectEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.BluetoothConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i5.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i5.Stream<_i2.BluetoothConnectionState>);

  @override
  int get mtuNow => (super.noSuchMethod(
        Invocation.getter(#mtuNow),
        returnValue: 0,
      ) as int);

  @override
  _i5.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i5.Stream<int>.empty(),
      ) as _i5.Stream<int>);

  @override
  _i5.Stream<void> get onServicesReset => (super.noSuchMethod(
        Invocation.getter(#onServicesReset),
        returnValue: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);

  @override
  _i5.Stream<_i2.BluetoothBondState> get bondState => (super.noSuchMethod(
        Invocation.getter(#bondState),
        returnValue: _i5.Stream<_i2.BluetoothBondState>.empty(),
      ) as _i5.Stream<_i2.BluetoothBondState>);

  @override
  _i5.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i2.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_0(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.DeviceIdentifier);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i5.Stream<_i2.BluetoothConnectionState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.Stream<_i2.BluetoothConnectionState>.empty(),
      ) as _i5.Stream<_i2.BluetoothConnectionState>);

  @override
  _i5.Stream<List<_i2.BluetoothService>> get servicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#servicesStream),
        returnValue: _i5.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i5.Stream<List<_i2.BluetoothService>>);

  @override
  _i5.Stream<List<_i2.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i5.Stream<List<_i2.BluetoothService>>.empty(),
      ) as _i5.Stream<List<_i2.BluetoothService>>);

  @override
  void cancelWhenDisconnected(
    _i5.StreamSubscription<dynamic>? subscription, {
    bool? next = false,
    bool? delayed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenDisconnected,
          [subscription],
          {
            #next: next,
            #delayed: delayed,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> connect({
    Duration? timeout = const Duration(seconds: 35),
    int? mtu = 512,
    bool? autoConnect = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #mtu: mtu,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disconnect({
    int? timeout = 35,
    bool? queue = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {
            #timeout: timeout,
            #queue: queue,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.BluetoothService>> discoverServices({
    bool? subscribeToServicesChanged = true,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
          {
            #subscribeToServicesChanged: subscribeToServicesChanged,
            #timeout: timeout,
          },
        ),
        returnValue: _i5.Future<List<_i2.BluetoothService>>.value(
            <_i2.BluetoothService>[]),
      ) as _i5.Future<List<_i2.BluetoothService>>);

  @override
  _i5.Future<int> readRssi({int? timeout = 15}) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> requestMtu(
    int? desiredMtu, {
    double? predelay = 0.35,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
          {
            #predelay: predelay,
            #timeout: timeout,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> requestConnectionPriority(
          {required _i2.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i2.PhyCoding? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> createBond({int? timeout = 90}) => (super.noSuchMethod(
        Invocation.method(
          #createBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeBond({int? timeout = 30}) => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LocalPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPlatform extends _i1.Mock implements _i6.LocalPlatform {
  MockLocalPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get numberOfProcessors => (super.noSuchMethod(
        Invocation.getter(#numberOfProcessors),
        returnValue: 0,
      ) as int);

  @override
  String get pathSeparator => (super.noSuchMethod(
        Invocation.getter(#pathSeparator),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#pathSeparator),
        ),
      ) as String);

  @override
  String get operatingSystem => (super.noSuchMethod(
        Invocation.getter(#operatingSystem),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
      ) as String);

  @override
  String get operatingSystemVersion => (super.noSuchMethod(
        Invocation.getter(#operatingSystemVersion),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystemVersion),
        ),
      ) as String);

  @override
  String get localHostname => (super.noSuchMethod(
        Invocation.getter(#localHostname),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#localHostname),
        ),
      ) as String);

  @override
  Map<String, String> get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  String get executable => (super.noSuchMethod(
        Invocation.getter(#executable),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#executable),
        ),
      ) as String);

  @override
  String get resolvedExecutable => (super.noSuchMethod(
        Invocation.getter(#resolvedExecutable),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#resolvedExecutable),
        ),
      ) as String);

  @override
  Uri get script => (super.noSuchMethod(
        Invocation.getter(#script),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#script),
        ),
      ) as Uri);

  @override
  List<String> get executableArguments => (super.noSuchMethod(
        Invocation.getter(#executableArguments),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  bool get stdinSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdinSupportsAnsi),
        returnValue: false,
      ) as bool);

  @override
  bool get stdoutSupportsAnsi => (super.noSuchMethod(
        Invocation.getter(#stdoutSupportsAnsi),
        returnValue: false,
      ) as bool);

  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
      ) as bool);

  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
      ) as bool);

  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
      ) as bool);

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  bool get isFuchsia => (super.noSuchMethod(
        Invocation.getter(#isFuchsia),
        returnValue: false,
      ) as bool);

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [BleCharacteristicsFinder].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleCharacteristicsFinder extends _i1.Mock
    implements _i7.BleCharacteristicsFinder {
  MockBleCharacteristicsFinder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.BleCharacteristics> findCharacteristics(
          _i2.BluetoothDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #findCharacteristics,
          [device],
        ),
        returnValue:
            _i5.Future<_i3.BleCharacteristics>.value(_FakeBleCharacteristics_2(
          this,
          Invocation.method(
            #findCharacteristics,
            [device],
          ),
        )),
      ) as _i5.Future<_i3.BleCharacteristics>);
}

/// A class which mocks [BleCharacteristics].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleCharacteristics extends _i1.Mock
    implements _i3.BleCharacteristics {
  MockBleCharacteristics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BluetoothCharacteristic get toRadio => (super.noSuchMethod(
        Invocation.getter(#toRadio),
        returnValue: _FakeBluetoothCharacteristic_3(
          this,
          Invocation.getter(#toRadio),
        ),
      ) as _i2.BluetoothCharacteristic);

  @override
  _i2.BluetoothCharacteristic get fromRadio => (super.noSuchMethod(
        Invocation.getter(#fromRadio),
        returnValue: _FakeBluetoothCharacteristic_3(
          this,
          Invocation.getter(#fromRadio),
        ),
      ) as _i2.BluetoothCharacteristic);

  @override
  _i2.BluetoothCharacteristic get fromNum => (super.noSuchMethod(
        Invocation.getter(#fromNum),
        returnValue: _FakeBluetoothCharacteristic_3(
          this,
          Invocation.getter(#fromNum),
        ),
      ) as _i2.BluetoothCharacteristic);
}
