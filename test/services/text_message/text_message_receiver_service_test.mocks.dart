// Mocks generated by Mockito 5.4.4 from annotations
// in multimesh/test/services/text_message/text_message_receiver_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:multimesh/models/mesh_node.dart' as _i11;
import 'package:multimesh/models/text_message.dart' as _i2;
import 'package:multimesh/models/text_message_status.dart' as _i6;
import 'package:multimesh/protobufs/generated/meshtastic/mesh.pb.dart' as _i8;
import 'package:multimesh/providers/node_service.dart' as _i10;
import 'package:multimesh/repository/text_message_repository.dart' as _i4;
import 'package:multimesh/services/interfaces/radio_reader.dart' as _i7;

import '../../common.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextMessage_0 extends _i1.SmartFake implements _i2.TextMessage {
  _FakeTextMessage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotifierProviderRef_1<T> extends _i1.SmartFake
    implements _i3.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TextMessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextMessageRepository extends _i1.Mock
    implements _i4.TextMessageRepository {
  MockTextMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<List<_i2.TextMessage>>> getByNodeNum() => (super.noSuchMethod(
        Invocation.method(
          #getByNodeNum,
          [],
        ),
        returnValue: _i5.Future<List<List<_i2.TextMessage>>>.value(
            <List<_i2.TextMessage>>[]),
      ) as _i5.Future<List<List<_i2.TextMessage>>>);

  @override
  _i5.Future<int> add({required _i2.TextMessage? textMessage}) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {#textMessage: textMessage},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> updateStatusByPacketId({
    required _i6.TextMessageStatus? status,
    required int? packetId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStatusByPacketId,
          [],
          {
            #status: status,
            #packetId: packetId,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.TextMessage> getByPacketId({required int? packetId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByPacketId,
          [],
          {#packetId: packetId},
        ),
        returnValue: _i5.Future<_i2.TextMessage>.value(_FakeTextMessage_0(
          this,
          Invocation.method(
            #getByPacketId,
            [],
            {#packetId: packetId},
          ),
        )),
      ) as _i5.Future<_i2.TextMessage>);

  @override
  _i5.Future<List<_i2.TextMessage>> getDirectMessagesBy({
    required int? myNodeNum,
    required int? otherNodeNum,
    required int? limit,
    int? offset = 0,
    required int? owner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectMessagesBy,
          [],
          {
            #myNodeNum: myNodeNum,
            #otherNodeNum: otherNodeNum,
            #limit: limit,
            #offset: offset,
            #owner: owner,
          },
        ),
        returnValue:
            _i5.Future<List<_i2.TextMessage>>.value(<_i2.TextMessage>[]),
      ) as _i5.Future<List<_i2.TextMessage>>);

  @override
  _i5.Future<List<_i2.TextMessage>> getBy({
    required int? toNode,
    required int? channel,
    required int? limit,
    int? offset = 0,
    required int? owner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {
            #toNode: toNode,
            #channel: channel,
            #limit: limit,
            #offset: offset,
            #owner: owner,
          },
        ),
        returnValue:
            _i5.Future<List<_i2.TextMessage>>.value(<_i2.TextMessage>[]),
      ) as _i5.Future<List<_i2.TextMessage>>);

  @override
  _i5.Future<int> countDirectMessagesBy({
    required int? myNodeNum,
    required int? otherNodeNum,
    required int? owner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #countDirectMessagesBy,
          [],
          {
            #myNodeNum: myNodeNum,
            #otherNodeNum: otherNodeNum,
            #owner: owner,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> count({
    required int? channel,
    required int? toNode,
    required int? owner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {
            #channel: channel,
            #toNode: toNode,
            #owner: owner,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [RadioReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockRadioReader extends _i1.Mock implements _i7.RadioReader {
  MockRadioReader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i8.FromRadio> onPacketReceived() => (super.noSuchMethod(
        Invocation.method(
          #onPacketReceived,
          [],
        ),
        returnValue: _i5.Stream<_i8.FromRadio>.empty(),
      ) as _i5.Stream<_i8.FromRadio>);
}

/// A class which mocks [ShowNotification].
///
/// See the documentation for Mockito's code generation for more information.
class MockShowNotification extends _i1.Mock implements _i9.ShowNotification {
  MockShowNotification() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> showNotification({
    required String? title,
    required String? text,
    required String? callbackValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotification,
          [],
          {
            #title: title,
            #text: text,
            #callbackValue: callbackValue,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NodeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNodeService extends _i1.Mock implements _i10.NodeService {
  MockNodeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NotifierProviderRef<Map<int, _i11.MeshNode>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_1<Map<int, _i11.MeshNode>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.NotifierProviderRef<Map<int, _i11.MeshNode>>);

  @override
  Map<int, _i11.MeshNode> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <int, _i11.MeshNode>{},
      ) as Map<int, _i11.MeshNode>);

  @override
  set state(Map<int, _i11.MeshNode>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, _i11.MeshNode> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: <int, _i11.MeshNode>{},
      ) as Map<int, _i11.MeshNode>);

  @override
  void notifyHasUnreadMessages(int? nodeNum) => super.noSuchMethod(
        Invocation.method(
          #notifyHasUnreadMessages,
          [nodeNum],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsetHasUnreadMessages(int? nodeNum) => super.noSuchMethod(
        Invocation.method(
          #unsetHasUnreadMessages,
          [nodeNum],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    Map<int, _i11.MeshNode>? previous,
    Map<int, _i11.MeshNode>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
